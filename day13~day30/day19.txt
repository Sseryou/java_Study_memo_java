추상클래스
1. 추상 클래스란?




클래스
	변수
	메서드


2. 추상클래스 문법

InputStream

추상메서드(설계)
공통기능



컬렉션 프레임워크




3. 추상클래스와 다형성

상속 extends 
-단일 클래스 상속
java는 단일 클래스 상속만 가능하다.
단일이 아닌 다중 상속을 받게 된다면, 같은 함수가 있을 경우 어느 쪽 함수를 실행할 지 애매함이 발생한다.
그러므로, 오류가 발생할 것이고, 이런 상황을 막기위해 자바에서 다중 클래스 상속은 지원하지 않는다.


final 예약어
- 변경 불가


1. 변수 - 상수


2. 메서드 - 재정의 불가


3. 클래스 - 상속 불가


인터페이스
설계용으로 용도가 정해진 클래스의 일종

class -> interface


1. 구현 코드가 없는 인터페이스

구현체가 없는 추상 메서드 , 상수 집합 == 인터페이스? 그런데 구현은 안된

인터페이스는 하위클래스가 자신을 구현하는지에만 관심이 있다...

implements(구현하다)를 사용한다. 상속의 extends가 아니다.

기본적으로 인터페이스의 속성은 추상 메서드의 접근제어자가 public이고,
implements를 이용해 구현할 때 재정의할 함수에 public 을 붙여야 한다.
(용도가 한정되어 있고, 명확하게 구현을 위해 쓰이는 클래스 이기 때문)

만약, 인터페이스 내에 함수를 미리 정의하고 사용하려면,
public 대신 default를 붙여야 한다.

static이 붙은 정적 메서드는 객체와 상관없이 쓸수 있으므로,
인터페이스 내에서는 애초부터 선언이 가능하다.

private -> JDK12? 9?버전 이상
private도 사용할 수 있다.
인터페이스 내부에서만 사용할 수 있는 메서드를 형성할 수 있다.

implements와 구현할 인터페이스를 다 불러온 후
마우스 우클릭 -> generate -> implement를 이용해
자동생성이 가능하다.

이름이 같은 어느 쪽의 상위 클래스/인터페이스 내부의 메서드를 사용할 때,
super로 어느 한쪽을 지정해 주어서 애매함을 없애면 메서드를 불러올 수 있다.
어느 한쪽을 지정하지 않고, 하위 클래스에서 재정의하는 방법도 있다.


2. 인터페이스 구현과 형변환(다형성)



3. 인터페이스의 요소 살펴보기

다중 상속이 가능하다.


인터페이스간 상속 - extends
다중 상속이 가능하며, 추상 메서드만 존재하기 때문에 출처를 정해 줄 필요가 없기 때문이다.


내부 클래스
	- 클래스 내부에서 정의된 클래스


1. 인스턴스 내부 클래스
	-인스턴스 자원과 비슷한 성격(변수, 메서드)
	-외부 클래스의 객체 생성 이후 객체 생성 가능
	-정적 자원 정의 불가(JDK15) (인스턴스가 만들어져야만 가능했음)
	-정적 자원 정의 가능(JDK16~) (처음부터 정적 변수, 자원 등을 체크하는 방식의 추가로 인해 가능)

	 Outer outer = new Outer();
        	Outer.Inner inner = outer.new Inner();

2. 정적 내부 클래스
	-정적 자원과 비슷한 성격(정적 변수, 정적 메서드)
	-외부 클래스의 객체 생성과 상관없이 사용 가능
	-static이기 때문에 외부에서 정의한 정적 변수가 아닌 함수는 사용 불가
	-단, 외부에서 static을 정의해주면 정적 내부 클래스에서도 사용 가능하다.

3. 지역 내부 클래스 ★
	-함수 내부 정의 , 사용
	-인터페이스, 추상클래스 -> 객체 생성이 가능
		-환경 : 지역내부(함수), 멤버 변수
		-미 구현된 메서드를 구현함으로써 가능
	
	함수는 반환을 하면 끝나야 한다.(자원 해제), 하지만 연산할게 남아있는 경우, 연산을 마치기 전까지
	함수가 유지된다.
	연산을 위해 참조된 변수는 데이터 영역에 존재한다. 즉, 상수화가 되어버린다.



4. 익명 내부 클래스



























