컬렉션 프레임워크
자료구조


컬렉션 프레임워크 핵심 인터페이스

Collection

	1. List 인터페이스
		- 순차 자료구조
			1) 순서가 유지되는 자료
			-0, 1, 2, 3, ....
			2) 중복을 허용한다.
	
			추가
			add(E e)
			add(int index, E e)

			조회
			E get(int index)
				
				포함여부 조회
				- contains
				- indexOf : 요소 위치 반환(0부터)
					없는 경우 -1

				- lastIndexOf : 요소 위치 반환(마지막 순서부터 역순)
				- isEmpty()

				전체 갯수
				-size

			삭제
			E remove(int index)
			boolean remove(Object o)

		구현클래스

			ArrayList
				-배열을 구현한 클래스
				- Object[]
				- 조회 속도가 매우 빠르다
				- 데이터의 중간 추가, 맨앞 삭제 -> 매번 새로운 배열이 생성 -> 메모리 낭비(성능 저하)

			LinkedList
				-
				Queue 인터페이스
				offer(E e) : 끝에 추가 : add(E e)
				E poll() : 가장 앞에 있는 요소 꺼내기

			Stack
				push(E item) : 끝에 추가
				E pop() : 끝에서 꺼내기

			Vector


	2. Set 인터페이스
		- 집합 자료구조
			1) 중복이 없는 자료구조
			 중복 체크 기준
			- equals and hashcode

			-
			
			2) 순서가 유지되지 않는다.

				추가
				add(E e)
			
				조회(없음)

				삭제
					remove(Object o)

		구현클래스
			HashSet
				
			SortedSet - TreeSet (HashSet + 정렬)

			정렬 기준

			-java.lang.Comparable
				int compareTo

			@Override
    			public int compareTo(Book o) {
        			//return o.price - price; //내림차순 가격정렬
       			// return price - o.price; //오름차순 가격정리
        			//return title.compareTo(o.title); //책 제목으로 오름차순 정렬
        			//return o.title.compareTo(title); //책 제목으로 내림차순 정렬
        			return title.compareTo(o.title) * -1; //책 제목으로 내림차순 정렬
    			} 값이 부호가 바뀌는것에 따라 오름차순 또는 내림차순이 결정된다.
			



			-java.util.Comparator
				int compare(T o1, T o2)

			TreeSet<String> names = new TreeSet<>(Comparator.reverseOrder());
			Comparator.reverseOrder()를 이용한 역순 정렬.


	
3. Map 인터페이스
	- 사전 자료구조
		- 키, 값의 쌍 구조
		- 키 - 키워드 : 검색 -> 중복 X (Set)
		- 값 - 중복 가능

		KeySet -> 키 조회가능.

		추가
			put(K key, V value)
				- key 값이 존재하면 교체
		조회
			V get(K key)

			값을 체크
			키 - boolean containsKey(K k)
			값 - boolean containsValue(Object o)

			키만 조회
			Set<k> keySet();

			값만 조회
			Collection<V> values()

			키와 값 함께 조회
			Set<Map.Entry<K,V>> entrySet()
			
		제거
			V remove(K key)

		총 갯수
			size()

		clear()
		....
			
		구현 클래스
			HashMap
			TreeMap(HashMap + 정렬)
			키값의 정렬
				-기준
			String은 파이널 클래스이기 때문에 못바꾼다.
			 따라서 대안적인 방법을 사용해야한다.
			conparator 사용
			 Map<String, String> members = new TreeMap<>(Comparator.reverseOrder());

		
		put
			-> Map.Entry(키, 값) 객체
			-> Map.Entry[] table에 추가


반복자
	-Iterator, ListIterator, Enumeration

Collection
	Iterator
		-boolean hasNext() : 다음 요소의 존재 유무
		- E next() -> 다음 요소를 꺼내올때

	ListIterator - List 인터페이스에만 정리 (Set은 사용 불가)
		- 순방향, 역방향 조회
		- 순방향
		- boolean hasNext()
		- E next()

		- 역방향
		- boolean hasPrevious()
		- E previous()

	Enumeration
		boolean hasMoreElements()
		E nextElement()

Arrays
1. 배열의 복사 - copyOf(), copyOfRange()
2. 배열 채우기 - fill(), setAll()
3. sort
4. 문자열 비교와 출력 - equals

