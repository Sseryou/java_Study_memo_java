변수
공간(메모리)의 이름

1.자료형
	-기본 자료형
		-메모리의 크기가 정해져 있는 자료형

		정수
		byte(1)
			unsigned -> 양의 정부
			0~255
		short(2)
		int(4)
		long(8)

		실수
		float(4)		
		double(8)

		문자
		char(2)
			값에 '값'
			문자 1개

			컴퓨터는 문자 자체는 인식X
			문자 - 숫자 매칭되는 표준안
			ASCII 코드
			0~255 - 알파벳, 특수문자(1byte, unsigned)

			문자형이 2바이트 -> 한글 또는 다른 다국어를 표현		
			
			한글 -> 숫자
			UNICODE(유니코드) -> 2바이트 형태의 숫자
			EUC-KR(2)
			UTF-8(3)

		논리
		boolean(1)

	-참조 자료형


2.상수와 리터럴
변수 : 변하는 수, 값 변경 가능

상수 : 변하지 않는 수
final 변수 -> 상수

final : 마지막, 최종적

long : int -> long
	처음부터 long 범위로 인식(L, l)

double(8)
float (4) = 처음부터 float 범위로 인식(F, f)
float num = 10.234 -> double num -> float num;


가장 효율적인 자료형
int, double

리터럴 상수
재료가 되는 값 -> 리터럴 상수
(숫자, 문자, true, false)
int i = 10;
int j = 10;

10은 리터럴 상수로써 데이터 상에는 1개만 있는 상태


3. 형변환

-묵시적 형변환

작은 자료형 -> 큰 자료형

0~1 -> 무한대

실수의 숫자 표현범위 > 정수 숫자 표현범위

실수는 정수보다 더 정밀한 수

모든 실수는 정수를 포함한다.


정수 -> 실수

byte -> short -> int -> long -> float -> double : 묵시적 형변환

작은 자료형 -> 큰 자료형
덜정밀한 자료형 (정수) -> 더 정밀한 자료형 (실수)


연산중에 묵시적 형변환
(작은자료형 -> 큰 자료형, 정수 -> 실수)

 int num1 = 10;
        long num2 = 20l;
        long result = num1 + num2; //연산은 동일 자료형 int num1 -> long num1



-명시적 형변환

큰 자료형 -> 작은 자료형 : 자료 유실 가능성 -> 자바쪽에서 의사 표현
			(자료형)

실수 -> 정수 : 자료 유실 가능성 (소수점)

3.14 -> 3

주석(설명)
// 한줄 주석

/*
여러줄 주석
*/

-주석은 컴파일시 배제
-프로그램 소스 실행 배제

연산자


1. 항과 연산자
10 + 20
항 : 연산에 사용되는 값 10, 20
	값1 -> 단항
	값2 -> 이항
	값3 -> 삼항

연산자 : 연산에 사용되는 기호(+)


2. 대입 연산자
=
변수 = 값; -> 왼쪽에 있는 변수 공간 값을 저장한다.
연산 후 대입 -> 대입 연산자는 우선순위가 가장 낮은 연산자

3. 부호 연산자 (단항)
+, -

-(부호 반전)
	양수 -> 음수
	음수 -> 양수


4. 산술 연산자
	+, -, *, /, %(나머지)

	10 + 2 * 10 -> 30

	*, /, % > +, -

	(...) -> 가장 높은 적용 우선순위

	홀수
	1,3,5,7,9
	2n + 1

	짝수
	2,4,6,8,10

	2n

5. 증가감소 연산자
	1씩 증가, 1씩 감소
	++
	num++ -> num = num + 1;
	++num -> num = num + 1; (연산 후 대입)

	--
	num-- -> num = num - 1;
	--num -> num = num - 1; (연산 후 대입)
	
6. 관계(비교) 연산자
	>, <, >=, <=, ==(같다), !=(다르다)	

	연산의 결과 = 논리값(true, false)

7. 논리 연산자
	AND - 교집합 - &&
		두 항이 모두 참일때 참
		true && true -> true

	OR - 합집합 - ||
		두 항중 하나라도 참이면 참
		true || false -> true
		false || true -> true

	NOT - 부정 - !
		참 -> 거짓
		거짓 -> 참

	연산의 결과 = 논리값(true, false)
	
	논리 연산자 < 비교 연산자
		비교 후 논리값 계산

8. 복합 대입 연산자
	산술연산자(+, -, *, /) + 대입(=)

	num += 2; // num = num + 2;
	num *= 2; // num = num * 2;

9. 삼항조건 연산자

조건식 ? 참일 때 : 거짓일 때

문자 여러개 -> 문자열
A : 문자 
char ch = 'A';
ABC : 문자열 
String str = "ABC";

+ : 문자열 결합 연산자
"ABC" + "DEF" => "ABCDEF"


10. 연산자 우선순위
( ... ), [ ... ] > 단항 ..... > 비교 > 논리 > 대입( = )


조건문
	if()
	if() ~ else ~
	if() ~ else if ~

선택문
	switch(키워드){
		case 값1:
			//값 1에 매칭되었을때 실행할 영역
		case 값2:

		....
		case 값3:
		default : 

ENUM 상수
문자열

		

반복문

	while

	while(조건식){
	//조건식이 참일때 반복되는 코드
	}

	do ~ while

	do{
		//조건식이 참일때 반복되는 코드
	}while(조건식);


	for
	-횟수가 정해진 반복문에 유용
	
	for(초기화식; 조건식; 증감식){
	
	}

반복횟수, 순서(1,2,3,4) -> 인덱스(index)

초기화식 변수명 -> int i (관례적)


break -> 반복 중단

continue -> 현재 반복을 중단하고 새로 시작

중첩 반복문

	반복문 안에 반복문
	for -> for
	for -> while
	while -> for
	while -> while

	중첩 반복에서 초기화 변수값
	i j k



