file -> close project

배열
신입생 100 > 학번 부여
int student1 = 1000;
int student2 = 1001;
int student3 = 1002;
...

int student100 = 1099;
많은 변수를 한꺼번에 선언 -> 배열;


1. 자료를 순차적으로 관리하는 구조, 배열
*동일 자료형, 순차적으로 나열 (메모리) -> 순서 유추가 매우 쉽다(메모리상 물리적 나열된 구조)

순서가 중요(0, 1, 2, 3 .... - 인덱스)
[순서 인덱스] -> 인덱스 연산자([])

2. 배열 선언과 초기화
자료형[] 배열변수명 = new 자료형[갯수];

자료형 배열변수명[] = new 자료형[갯수];


배열 선언 + 초기화

자료형[] 배열변수명 = new 자료형[]{값1, 값2, 값3...}
자료형[] 배열변수명 = {값1, 값2, 값3...}

기본 변수
	정수 : byte, short, int, long
		-선언만 하면 0

	실수 : float, double
		-선언만 하면 0.0
	문자 : char
		
	논리 : boolean
		-선언만 하면 false

참조자료형 변수
	-선언만 하면 null


3. 배열 사용하기

모든 배열 -> length 속성
length : 공간의 갯수


향상된 for문 : 처음부터 끝까지 반복

for (자료형 변수 : 배열 변수) {

}

for (int num : nums){
            System.out.println(num);
        }

nums 배열에 있는 배열 안의 내용 전부 출력.


4. 다차원배열

자료형[] 배열변수명 = new 자료형[갯수]; - 1차원 배열
	- 직선

자료형[][] 배열변수명 = new 자료형[갯수][갯수]; - 2차원 배열
	- 평면

자료형[][][] 배열변수명 = new 자료형[높이][가로][세로] - 3차원 배열
	- 입체
	가로 X 세로 X 높이

int[][] nums = new int[2][3]; //2행 3열

자료형[][] 변수명 = new 자료형[][] {{값1,값2,값3,..}, {값1, 값2, 값3,...}...}

자료형[][] 변수명 = {{값1,값2,값3,..}, {값1, 값2, 값3,...}...}




연산자 오버로드
+
문자열 + 문자열 -> 문자열 결합

new 연산자
-> 객체 생성

배열에서 new 연산자
-> 갯수 만큼 변수 공간 생성

Book[] books = new Book[5]; -> 객체를 만든게 아닌 공간만 만든 것.

Arrays.toString(배열)  (배열 안의 값을 확인) 


객체 지향 프로그래밍1

객체란?

Object - 사물, 대상

회원
상품
주문


1. 객체와 객체지향 프로그래밍

속성 - 변수

행위 - 함수

객체간의 상호작용 ( 중요! )


2. 클래스 살펴보기

- 객체를 만들기 위한 설계도

class 클래스명 {

	멤버 변수 정의

	멤버 함수(메서드) 정의

}

클래스 자료형 변수 = new 클래스명(); -> 객체 생성

멤버 변수
멤버 함수(메서드)

변수.변수명
변수.함수(...)

설계도 Class -> 메모리라는 부품 -> 객체(Object)

객체 == 인스턴스(instance - 실체)


3. 클래스 이름을 짓는 규칙

관례

카멜 표기법을 따르지만 클래스는 앞글자도 대문자 : 파스칼 케이스
	예)OrderInfo




4.클래스와 인스턴스




5. 패키지란?
package -> 폴더

java.util
java.time


메서드
1.함수란?
2.함수의 입력과 반환

3.함수 정의하기

반환자료형 함수명 (매개변수1, 매개변수2 ...){
	//기능이 수행되는 코드
	
	return 수행결과의 반환값;
}

- 함수 이름
- 매개변수
- return 예약어와 반환형

4. 함수 호출하고 값 반환하기

5. 매개변수 살펴보기

6.함수 호출과 스택 메모리
함수가 연산을 위해 필요한 스택 영역 메모리 -> 메모리 할당


스택(Stack) 구조 - 쌓다
가장 처음 투입된 것이 가장 마지막에 꺼낼수 있는 구조
가장 마지막에 투입된 것이 가장 처음에 꺼낼수 있는 구조


큐(Queue) 구조 - 일렬로 대기
가장 처음 투입된 것이 가장 처음 꺼낼수 있는 구조
가장 마지막에 투입된 것이 가장 마지막에 꺼낼수 있는 구조


선착순, 번호표


함수가 호출 될 때만 메모리 필요
함수가 종료되면, 할당한 메모리가 해제된다.

[함수] 지역 변수
main() -> add();


다른 함수와 main 함수가 함께 있을때는 main이 먼저 실행되고 그 다음 다른 함수가 실행된다.
main함수가 제일먼저 실행되므로 제일 먼저 스택이 된다. 다른 함수도 그 위에 쌓인다.
함수가 종료되면 스택구조이므로 맨 마지막에 main이 종료된다.

main 함수의 종료는 프로그램의 종료를 의미하므로, 모든 함수가 종료될 때까지 종료 될 수 없다.
그래서 스택 구조가 될 수밖에 없고, 스택 메모리에서 제일 먼저 실행하게 된다.


7. 함수의 장점
8. 클래스 기능을 구현하는 메서드


상수화?









