메서드는 내용 자체가 바뀌지는 않기 때문에 데이터 영역(코드 & 상수)안의 메서드 영역에 있음

정보은닉

1. 접근 제어자(클래스, 변수, 메서드)

public : 클래스 내부 외부, 타 패키지에서 접근 가능
protected : 동일 패키지에서만 클래스 내부, 외부 접근 가능 (default)
		타 패키지는 상속을 통해서 클래스 내부에서만 접근 가능(private)
default : 동일 패키지에서만 클래스 내부, 외부 접근 가능
	- 접근 제어자를 따로 정의 X
private : 클래스 내부에서만 접근이 가능

자바는 패키지 이름에 점을 찍어서 서브 패키지로 만들 수 있다. exam01.sub


2. 멤버 변수 -> 값의 통제 불가 -> 접근 못하게 차단


3. getter, setter -> 멤버 변수를 지정하고 조회할 수 있는 별도 메서드 정의

빈공백 -> 마우스 우클릭 -> Generator -> getter and setter 생성 누르기 -> 컨트롤 누르고 여러개 누르기

Object : toString() 재정의 : 멤버 변수의 값을 확인

객체의 참조 변수를 출력 -> toString() 호출

빈공백 -> 마우스 우클릭 -> Generator -> toString 생성 누르기

toString 재정의 후 (generator toString 이후)
System.out.println(s1);  == s1.toString(); (java에서만 적용, 자주 쓰는 기능이기 때문에 편의상 적용)


this 예약어
- 객체 생성 이후 사용 가능(자동적으로 생성되지만 숨겨져 있음)
- 인스턴스 주소
- 모든 인스턴스 메서드의 지역변수
- 생성될 객체(인스턴스) 주소를 가지고 있는 참조 변수

- 값은 이미 정해져 있지만 호출 될 때만 활성화 = 값 대입
  (생성된 객체의 주소값)

- 객체에 접근할수 있게 해주는 함수
- 지역변수는 전부 스택
- 명확하게 구분이 된다면, 생략이 가능하다.


생성자 메서드

기본 생성자는 보이지 않아도 자동으로 생성 됨
반환값이 주소이며 ,수정할 수 없게 되어있다.

public Schedule2(){

    }


	this()

public Schedule2(){
       this(2023, 2, 28);
    }
생성자를 내부에서 그대로 호출할때도 사용 가능하다.


static 변수

1. static?
static 정적인 : 고정된
	-> 동적인

	정적 메모리
	데이터 영역(한번 정해지면 쉽게 바뀌지 않는 메모리들)	

	동적 메모리
	스택, 힙 (만들었다 사라지는 등 역동적으로 변하는 메모리들)

static id : 클래스 로더 -> 클래스 구조화 -> static 변수 공간 할당 (객체 생성과 관계 없음)

static이 붙은 변수는 객체 생성시에 구조를 가져올 수 없다.
대신, 변수의 값 자체는 변수 공간을 할당받아 따로 저장된다.
static이 붙은 변수를 참조하는 객체를 여러개 만들게 되면 그 객체는 전부 static이 붙은 변수를
공유하게 된다. 즉, static 값을 바꾸게 되면 모든 객체의 static이 붙은 변수값이 전부 하나로 바뀌게 된다.


2. 클래스 변수(static 변수)



3. 클래스 메서드(static 메서드)

객체 생성과 관련 X
지역변수 this는 없다!
-> 인스턴스 자원 접근 불가(인스턴스 메서드, 인스턴스 변수)

꺼지기 전까지 데이터를 잡아먹는다!

변수의 유효범위

지역변수 : 함수가 호출될때 스택에서 활성화되고 종료되면 제거되는 변수
(함수가 실행되는 동안만 유지)

인스턴스 변수 : 객체가 생성되면 힙에서 공간을 할당
(참조가 끊기면 가비지콜렉터가 해제)

정적 변수 : 클래스로더 -> 클래스 구조화시 -> 활성화 되면 변수
	-> 객체 생성과 관련 없음
	-> 데이터 영역

객체 생성 상관없이 기능적인 부분을 공유

java.lang.Math



데이터 영역 메모리(코드&상수 영역)

class 코드
메서드 영역
정적 변수
정적 메서드
상수(final), 리터럴 상수(10, 20, A, true, false...)



static 응용 - 싱글톤 패턴
-인스턴스를 1개만 생성해서 공유
-기능을 담당하는 클래스는 객체를 여러개 만들 필요가 없다.

1) 생성자 메서드에 접근 제어자를 private : 외부 생성 차단
2) 객체를 인스턴스 내부에서 생성한다.
3) 내부에서 생성된 객체 외부에서 사용할 수 있는 메서드
	(static Calculator getInstance())


상속과 다형성
1. 상속이란?

2. 클래스의 상속
class 하위클래스 extends 상위클래스{

}

3. 클래스 상속 문법
A <-- B <-- C

4. super()
	지역 변수 : 상위 클래스의 생성될 객체의 주소값을
			가지고 있는 참조 변수

	메서드 : 상위클래스의 생성자 메서드

C-> super() : B() -> super() : A()
		

5.상속에서 클래스 생성과 형 변환
-묵시적 형변환 (다형성)
-명시적 형변환







