지네릭스

https://github.com/yonggyo1125/curriculum300H/tree/main/1.JAVA(84%EC%8B%9C%EA%B0%84)/15%EC%9D%BC%EC%B0%A8(3h)%20-%20%EC%A7%80%EB%84%A4%EB%A6%AD%EC%8A%A4


public class Box<T>


T 위치 = 타입 매개변수


1.지네릭스란?
- 타입 안정성
- 형변환의 번거로움을 불인다.

-컴파일러가 명확하게 알 수 있는 형태 Object로 바꿔서 인식한다.
호출(또는 인스턴스 생성) 할 때만 타입을 명확하게 알 수 있기 때문에,
우선은 타입을 Object로 두고 호출이 되어서 명확한 자료형을 알 수 있을때 그 자료형으로 바뀐다.



컴파일할때는 명확하게 명시를 해 주어야 한다. <T>는 원래 맞지 않는 문법이다.

상속도 가능하다!
public class Box<T extends Fruit>

이렇게 되면 컴파일러가 헷갈리지 않게 된다. 즉 Object를 사용하지 않는 상태가된다.
그리고
Fruit 또는 Fruit 이하의 클래스만 상속가능하게 된 형태가 된다.


private static T staticItem; //static 자원은 처음부터 자료형이 결정 -> (T를 명확히 명시해줘야 사용 가능)
배열도 자료형을 명시해줘야 하기 때문에 사용이 불가하다.


2. 지네릭 클래스의 선언

3. 지네릭스의 용어

1) 지네릭 클래스
	Box<T>

2) 타입변수
	T

	T(type)

3) 원시타입
	Box


4.지네릭스의 제한
상속은 가능하지만 동일한 자료형에서만 가능하다.
-동일자료형



5. 지네릭 클래스의 객체 생성과 사용
- 타입 일치
- 상속관계 O
- 추정가능한 경우 생략 가능


6. 제한된 지네릭 클래스
- extends : 상한 제한
'	예)extends Fruit -> Fruit 또는 하위 클래스

- & : 인터페이스 제한



지네릭 메서드
	- 타입 -> 메서드가 호출될 때 결정
	


7. 와일드 카드
1) ? -> Object

2) extends - 상한 제한
	? extends Fruit
		->Fruit
3) super - 하한 제한
	? extends Apple
		-> Apple, Fruit, Object

8. 지네릭 메서드
9. 지네릭 타입의 제거



컬렉션 프레임워크

설계 기준 - 자료구조

1. 순차자료구조
	List
		1) 순서가 유지되는 자료
		배열

		2) 중복 데이터를 허용

2. 집합자료구조
	Set
	
		1) 중복이 없는 자료

		2) 순서 유지 X


3. 사전자료구조
	Map
		1) 키 - 값 쌍의 구조
		키 - 값을 찾기 위한 검색 키워드

		2) 키 - 중복 X (집합 자료)
		3) 값 - 중복 O



1. 순차 자료구조
	List 인터페이스
	1) 순서가 유지되는 자료
	2) 중복 O
	
2. 집합 자료구조
	Set 인터페이스
	1) 중복 X
	2) 순서 유지 X


3. 사전 자료구조
	Map 인터페이스
	1) 키 - 값의 쌍 구조
	2) 키 - 중복 X(집합)
	3) 값 - 중복 O

Collection
	List
	Set

Map


컬렉션 프레임워크 핵심 인터페이스
1. List 인터페이스
	추가
		boolean add(E e) : 끝에 추가
			add(int index, E e) :
				: index 위치에 추가

	조회
		E get(int index) : index 위치에 있는 요소 조회

		요소의 존재 유무
		boolean contains
		int indexOf
		int lastIndexOf
		boolean isEmpty()

	삭제
		E remove(int index) : index 위치의 있는 요소 삭제
		
	변경 	
		set(int index, E e) : index 위치에 있는 요소 변경

	갯수 조회
		int size() : 요소의 갯수

	구현 클래스
		ArrayList - 배열의 구현 클래스
			Object[]
			- 물리적 배열
			- 조회 속도가 매우 빠르다.
			- 중간 추가, 삭제 -> 새로운 배열이 매번 생성
			- 성능 저하
			- 끝에 추가, 끝에서 제거 -> 효율적 O
				-> 스택구조의 구현체를 만들기가 편하고 성능O



public static void main(String[] args) {
        ArrayList<String> names = new ArrayList<>();
        names.add("이름1");
        names.add("이름2");
        names.add("이름3");
        names.add("이름4");
        names.add("이름5");

        for(int i = 0; i < names.size(); i++){
            names.remove(i);
        }

        for(int i = 0; i< names.size(); i++){
            String name = names.get(i);
            System.out.println(name);
        }
    }

결과값 이름2, 이름4

이유 : 배열의 제거 순서와 관련이 있음.
String 배열은 안에 있는 값을 바꾸거나 제거, 추가를 하게 되면 배열을 재생성한다.
재생성 하면서 배열의 순서가 바뀐다.
저 for문에서, 배열의 0번째 값을 제거하면 이름1이 제거되고 배열이 재생성된다.
다음 배열은 이름 2,3,4,5 가 되며, 배열순서는 2가 0번째 값이 되고 3이 1번째 값이 된다.
그 다음은 for문에 의해 1번째 값이 제거된다.
하지만 배열이 재생성 되었기 때문에 순서상 0번째인 이름 2은 넘어가고 이름 3이 제거가 된다.
이런식으로 반복해서 제거안되고 제거되고를 반복하기 때문에 이름 2, 4만 남게 된다.



			
		LinkedList
		Stack
		Vector
		

2. Set 인터페이스

	추가
		add(E e)
	조회
		X -> 순서가 특정 X

		요소의 존재 유무
		contains(Object o)
		isEmpty()

	제거
		remove(Object e)

	갯수
		int size()
	
	구현 클래스
		HashSet
		SortedSet - TreeSet
	
3. Map 인터페이스



컬렉션 프레임워크
	-toString() -> 내부 요소를 확인







	


