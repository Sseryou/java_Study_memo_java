String 내부의 속성으로 private final byte[] value가 있음.
final이기 때문에 수정을 할 수 없다.

CharSequence (인터페이스)


Wrapper 클래스
-기본 자료형을 감싸는 클래스

class Integer{
	...
	...
	int value;
	...
}

1. 기본 자료형을 위한 클래스
Boolean
Byte
Character
Short
Integer
Long
Float
Double



Integer
	.valueOf
	-> byte범위의 숫자 -> 동일 객체
	new Integer는 권장하지 않는다. 삭제 예정
	대신 String처럼, Integer를 그대로 쓸 수 있다.
	new Integer 대신 사용하여 데이터 측면에서 좀 더 효율적이게.


        Integer num1 = Integer.valueOf("10");
        Integer num2 = Integer.valueOf(10);
        System.out.println(System.identityHashCode(num1));
        System.out.println(System.identityHashCode(num2));

둘 다 주소값이 같게 나온다. 즉 같은 객체이다.


3.오토박싱과 언박싱



Integer 클래스
최대값, 최소값을 정의해 놓았다.


parseInt 문자열을 정수로 반환
int num3 = Integer.parseInt("10");
System.out.println(num3 + 20);

결과 : 30


자바 1.5부터 작동

자동으로 객체로 넣는다 -> 오토박싱
임의 객체 안에서 꺼낸다 -> 언박싱

	int num1 = 100;
        Integer num2 = num1; //Integer.valueOf(num1) -> 오토 박싱(내부에서 컴파일러가 자동적으로 해준다.)
					(원래 대입은 동일한 자료형밖에 안되지만 많이 하는 작업이기 때문에 그렇다.)

Integer 안에 num1값을 넣었다. (오토박싱) 내부에서 Integer.valueOf(num1) 작동.

	int num3 = num2; //num2.intValue() -> 언박싱
int 안에 Integer값을 넣었다. wrapper 클래스에서 다시 일반 자료형으로 바꿨다.


	int num1 = 100;
        Integer num2 = Integer.valueOf(200);
        int num3 = num1 + num2; // num2.intValue(); //언박싱


 	Integer num4 = Integer.valueOf(100);
        Integer num5 = Integer.valueOf(200);
        int num6 = num4 + num5; // num4.intValue() + num5.intValue()
	객체와 객체끼리는 더할 수 없으나 언박싱으로 인해 계산이 가능해진다.

	Integer num7 = 100 + 200; //300 -> Integer.valueOf(300);
		더한 값을 객체로 만들수 없으나 오토박싱으로 인해 계산이 된다.



Class
동적 로딩(Class.forName)
타 프로그램에서 클래스 불러올때 사용

 try {
            Class cls = Class.forName("exam03.Person"); (패키지명.클래스명)
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }

유용한 클래스


1. java.lang.math

ex) Math.abs(-100)

abs : 절대값으로 바꿔준다.

exp : 어떤 숫자의 제곱

ceil : 올림

floor : 버림

round : 반올림

pow(a,b) : a의 b승

random() : 0~1 미만의 랜덤숫자 추출 (소수점 밑으로 나오기 때문에 실수 지정 필요)


	double num = random();
        System.out.println(num);

        int num2 = (int)(random()*10); //0~9
        System.out.println("num2 = " + num2);

        int num3 = (int)(random()*3); //0~2
        System.out.println("num3 = " + num3);

import static java.lang.Math.*
정적 메서드만 있는 Math 같은 경우, 이런 식으로 스태틱을 포함해서 임포트해주면
Math를 생략해도 작동시킬수 있게 할 수 있다.


2. java.util.Object 클래스
	static hash(Object... args)

	고정 해시 -> 같은 조합의 값 -> 같은 해시

        int num1 = 10;
        String str = "abc";
        int hashcode = Objects.hash(num1, str);
        System.out.println(hashcode);


3. java.util.Random 클래스

Random random = new Random();
random.ints().limit(4).forEach(System.out::println);
int 범위의 난수를 4개 출력한다.

4. java.util.Scanner 클래스

예외 전가. throws 필요

(data.txt 파일 미리 생성한 예시)

 public static void main(String[] args) throws IOException {
        int total = 0;
        Scanner sc = new Scanner(new File("data.txt"));
        while(sc.hasNext()){ //다음 라인에 데이터가 있으면 true
            int score = sc.nextInt(); //다음라인의 데이터 -> 다음칸 이동
            total += score;
        }
        System.out.println(total);
    }

콘솔에서 입력받을때 System.in 사용

Scanner sc = new Scanner(System.in);
        System.out.println("두 수를 입력 : 형식) 숫자1 숫자2 연산자(+)");
        String input = sc.nextLine(); //입력을 받을 때까지 멈춘다(블록킹)
        String[] nums = input.split(" ");  //스페이스바 하나 기준으로 입력받은 값을 배분한다 , 그 값을 String[] nums 배열에 넣는다.
        int num1 = Integer.parseInt(nums[0]); //첫번째 배열의 값을 추출해서 정수로 바꾼다. 오토박싱이 아닌 형변환이다.(String 이기 때문)
        int num2 = Integer.parseInt(nums[1]); // 두번째 배열도 그렇게 해 준다.
        char opr = nums[2].charAt(0); //세번째 배열은 받아서 문자형으로 바꿔준다.(String -> charAt(0) 사용. 첫번째 배열을 문자열로 변환함)
        int total = 0;
        switch (opr){
            case '+' :
                total = num1 + num2;
                break;
            case '-' :
                total = num1 - num2;
                break;
            case '*' :
                total = num1 * num2;
                break;
            case '/' :
                total = num1 / num2;
                break;
        }
        System.out.println(total);

5. java.util.StringTokenizer 클래스

문자열을 특정한 문자 또는 기준으로 분리한다.

   String str = "apple,melon,orange,banana";
        StringTokenizer st = new StringTokenizer(str, ",");
        while (st.hasMoreTokens()){
            String s = st.nextToken();
            System.out.println(s);
        }

결과 : apple
melon
orange
banana

토큰 기준에 여러개를 넣을 수 있다.

 String str = "apple,melon,orange#banana";
        StringTokenizer st = new StringTokenizer(str, ",#");
        while (st.hasMoreTokens()){
            String s = st.nextToken();
            System.out.println(s);
        }



String - 문자열을 다루는 메서드

	boolean contains
	boolean startWith
	boolean endsWith

	int indexOf -> 문자열의 위치, 없는 문자열이면 -1
	(왼쪽에서 오른쪽)
	int lastIndexOf -> 문자열 위치, 없는문자열이면 -1
	(오른쪽에서 왼쪽)

	static String format

		%s = 문자열
		%c = 문자
		%d = 정수
		%f = 실수
		%n = 줄개행

	PrintStream System.out
		println() -> 출력 + 줄개행 문자(\n)
		print() -> 출력, 줄개행X
		printf(String format, Object... args)

\n -> new Line -> 줄 개행
\r -> carriage return -> 첫번째 칸으로 이동
\t -> 탭키 1번 누르기
\b -> 백스페이스 키

\r\n


	String str = String.format("%s님 안녕하세요!", "이름");
        System.out.println(str);

	int num1 = 10;
        int num2 = 20;
        String str2 = String.format("%d + %d = %d %n", num1, num2, num1 + num2);
        System.out.println(str2);



	int num1 = 10;
        int num2 = 20;
        System.out.printf("%d + %d = %d\n", num1, num2, num1 + num2);





인덱스의 문자열을 꺼내는 메서드 : charAt();

 String str = "abcdefg"; // char[] strs = {'a', 'b', ....}
        char ch = str.charAt(2);
        System.out.println(ch);

결과값 : c

인덱스의 문자를 아스키코드 또는 유니코드로 반환해 꺼내는 메서드 : codePointAt();
	int code = str.codePointAt(0);
        	System.out.println(code);
결과값 : 97 (아스키코드 소문자 a.)

문자열을 결합함 : concat
 String str2 = str.concat("hij");
        System.out.println(str2);

abcdefghij


그 문자가 문자열에 포함되어 있는지 판별하는 메서드 : contains();

String str = "가abcdefg" 로 바꿈
String str2 = str.concat("hij");
 System.out.println(str2.contains("가"));

true

문자열이 시작할때 이 문자열인지 체크하는 메서드 : startsWith
문자열이 끝날때 체크 : endsWith
 String str = "apple,mango,melon,banana";
        System.out.println(str.startsWith("apple"));
        System.out.println(str.endsWith("banana"));

문자열이 시작하는 위치 찾기 : indexOf()
System.out.println(str.indexOf("mango"));
결과 : 6 (apple부터 시작, 그 직후 mango의 첫 글자인 m 인식)

왼쪽부터 체크함. 그 문자가 없으면 -1 반환
System.out.println(str.indexOf("mango2"));
결과 : -1 (mango2는 없음)\

LastIndex는 오른쪽부터 왼쪽으로 인식함.

 String str = "apple,mango,melon,banana,apple";
 System.out.println(str.lastIndexOf("apple"));

결과 : 25



























