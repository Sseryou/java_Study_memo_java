Date 클래스
1. jdk1.0
2. java.util 패키지


Calender 클래스
jdk1.1

1) static Calender getInstance()
	- Calender 객체 생성
		- 달력체계가 다른 국가가 있으므로
		- Locale 정보를 가지고 결정
		- (java.util.Locale)
.getInstance 를 이용해서 불러와야 사용할 수 있다.

2) get(필드 상수) -> 날짜, 시간 조회
	set(필드 상수, 값) -> 날짜, 시간 변경
	add(필드 상수, 값) -> 날짜, 시간을 가감 (필드에서의 값이 넘어서면 자동으로 월, 년도가 변경)
	roll(필드 상수, 값) -> 날짜, 시간을 가감 (필드에 해당하는 항목이 계속 반복)
	
	Calender에 있는 상수값을 가져오는 것이므로,
	import static java.util.Calender.*;를 붙이는 것으로
	Calender를 일일이 상수값에 붙이는 과정을 생략 할 수 있다.


3)문제점
	1) month -> 체계 0~11 : 혼동의 가능성
	2) 날짜, 시간 변경시 - 원 객체가 변경되는 문제점
		-> java.time 패키지
			날짜, 시간 변경시 새로운 인스턴스 생성 반환
	3) 상수 필드의 체계가 매우 부족
	4) 메서드가 직관적이지 않음
		(add가 날짜 추가, 감소 다 담당)



java.time 패키지
jdk1.8(8)

1. java.time : 핵심 클래스
	LocalDate : 날짜
	LocalTime : 시간
	LocalDateTime : 날짜(LocalDate) + 시간(LocalTime)
	ZonedDateTime : LocalDateTime + 시간대(ZoneId - Asia/Seoul)
	OffsetDateTime : LocalDateTime + 시간대(시간대별 차이(+9))
	
	Period - 년,월,일 기준의 기간
	Duration - 초, 나노초 기준의 기간
	
	Instant -Epoch Time - 1970.1.1 자정, 1/1000초 단위로 카운팅한 정수(Timestamp)

2. java.time.format : 날짜, 시간의 형식화
	DateTimeFormatter
		.format : 날짜, 시간 -> 형식화되면 문자열
		.parse : 형식화된 문자열 -> java.time의 핵심클래스로 변환
		
3. java.time.temporal : 
- 날짜, 시간 필드 상수
		- TemporalField 인터페이스 -> ChronoField(Enum상수)
- 날짜, 시간 단위
		- TemporalUnit 인터페이스 -> ChronoUnit(Enum상수)
		
		
4. java.time.zone : 시간대 관련 클래스 모음


java.time 패키지의 핵심 클래스
1. 핵심 클래스
	1) LocalDate : 날짜를 다루는 클래스
	2) LocalTime : 시간을 다루는 클래스
	3) LocalDateTime : LocalDate + LocalTime : 날짜와 시간
	4) ZonedDateTime : LocalDateTime + ZonedId(시간대)
		- 썸머타임제 : 자동 계산
		
	
	5) OffsetDateTime : LocalDateTime + ZoneOffset(시간대, +시간)
		- 물리적 시간 차이(+9)
	
	참고)
		ZoneId
			.of("시간대") : 예) ZoneId.of("Asia/Seoul");
	
		ZoneOffset
			.of("시간 차이") : ZoneOffset.of("+9");
2. 객체 생성하기
	static ... of(....) : 날짜, 시간의 특정 일시
	static ... now() : 현재 사점의 날짜와 시간


3. Temporal과 TemporalAmount

	Temporal
		- Temporal : 날짜, 시간, 시간대
		- TemporalAccessor : 날짜, 시간 조회 설계
		- TemporalAdjustor : 날짜, 시간 변경 설계
		
		LocalDate, LocalTime, LocalDateTime, ZonedDateTime,
		OffsetDateTime, Instant
		
TemporalAmount
	- Period, Duration
		
		
4. TemporalUnit과 TemporalField
	TemporalField - 날짜, 시간 필드 - 년, 월, 일
			- ChronoField (Enum 상수)
	TemportalUnit - 날짜, 시간 단위 - DAYS, HOURS
			- ChronoUnit (Enum 상수)


5. 특정 필드의 값 가져오기
		- get(TemporalField ....)
		- get(TemporalUnit ....) : Period, Duration
		
6. 필드의 값 변경하기
		- plus(int amount, TemporalUnit ...) : 추가
		- minus(int amount, TemporalUnit ...) : 감소
		- with(TemporalField, int amount) : 변경
		
		
7. 날짜와 시간의 비교

	isAfter
	isBefore
	isEqual
	
Instant
1. Epoch time -> 1970.1.1 자정
		- 1/1000초 카운팅한 정수
		- 1초 단위 카운팅 / Timestamp
		- UTC+0 (Coordinated Universal Time)
			GMT
			
	

Period와 Duration

Period - 연, 월, 일, 간격
Duration - 시간 간격
		


2023-04-02 00:00:00 + 초

형식화
java.time.format
	DateTimeFormatter
		.ofPattern("패턴")
		
		.format(TemporalAccessor temporal);


	.parse(문자열) : 문자열 -> java.time 핵심 클래스로 변환
	