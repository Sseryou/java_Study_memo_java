main의 java영역은 일반적으로 자바가 돌아감


개발할땐 테스트 영역에서 개발하고, 완성되면 메인영역으로 옮긴다.


Validator (검증)
	-필수 항목, 자리수 체크

인터페이스를 한개 만든다.
여러가지가 들어올수 있으므로 지네릭 타입으로 둔다.

void setException(RuntimeException e); 으로, 런타임예외가 발생하면 셋익셉션이 뜨게한다.

default void requiredCheck(String str, RuntimeException e){
        if(str == null || str.isBlank()){
            throw e;
        }
    } //필수 항목을 체크하는 코드

default void requiredCheck(long num, long min, long max, RuntimeException e){
        if(num <= min || (max > 0 && num > max)){
            throw e;
        } //숫자가 최저값과 최대값 사이에 없으면 예외발생



공통적으로 많이 쓰는 기능들은 디폴트 메서드로 구현
메서드 오버로드를 이용하여 같은 이름의 메서드를 여러개 구현하여 통일성을 높인다.

기능들을 만들면서 테스트하고, 테스트하면서 기능을 구현하는 방식 TDD

Null익셉션 발생시 -> 그 기능을 구현해야 한다.


테스트가 끝나면, 패키지 파일을 메인 java 쪽으로 옮기면 된다.


JUnit5
1.@Test
2.주요 단언 메서드

3.테스트 라이프사이클

1)@BeforeEach
	-테스트 케이스 실행 전에
	-테스트 케이스 실행 전 사전 작업이 필요
2)@AfterEach
	-테스트 케이스 실행 후에
	-테스트 케이스 실행 후 정리 작업이 필요

두 테스트 모두 테스트를 할 때마다 실행된다. 각각의 모든 메서드마다 각각 실행된다.


3)@BeforeAll
	- 모든 테스트 실행전 가장 처음 실행
	- static 메서드로만 정의

4)@AfterAll
	- 모든 테스트 실행 후 가장 마지막에 실행	
	- static 메서드로만 정의

4. 추가 애노테이션

1) @DisplayName
2) @Disabled
	-테스트 배제
3) @TempDir
	-임시 폴더를 생성
4) @Timeout
	-> 성능 체크
	-> 지정된 시간내에 기능수행이 되는지 체크


Mockito 기초 사용법
Mockito는 모의 객체 생성, 검증, 스텀을 지원하는 프레임워크이다.

mvn리포지토리 -> Mockito Core 5.2.0 의존성 복붙
		->Mockito JUnit Jupiter 검색, 5.2.0버전 복붙



1. 모의 객체 생성 (mock)

2. 스텁 설정 (given)
1) 모의 객체 생성


-willReturn

-반환값이 있는 경우
given(객체.메서드)
	.willReturn
	.willThrow

-반환값이 없는 경우
willThrow(발생할 예외 class)
	.given(모의객체)
	.호출메서드...

mockito 사용시, mockito-junit-jupiter를 설치했다면
모의객체를 더 간단하게 만들 수 있다.

@ExtendWith(MockitoExtension.class)
public class Apptest3 { //확장을 한 기능을 애노테이션으로 추가한다


@Mock
    private Member member;
//모의 객체를 미리 만든다.



웹기초
요청 (브라우저 ....) - Request
요청 헤더와 바디는 요청하는 쪽, 즉 브라우저가 보내게 된다.

	요청전문 (형식)
		요청 헤더(Header) - 요청쪽의 정보
			-요청 방법(method)
			-GET, POST
			-요청 IP, 주소

			-요청 환경에 대한 정보
			-언어, 국가
			-사용하는 브라우저 종류
			-(user-agent)
			
			-요청 바디의 데이터 종류 ☆
			-(content-type)

		요청 바디(Body) - 요청 데이터
			-POST 요청 데이터

응답 (서버 ...) - Response
- Server
	응답전문(형식)
		응답 헤더(Header)
			-응답 상태 코드
			2xx : 
				200 : 응답 성공(요청 -> 서버 -> 응답)
				201 : 작성됨(POST - 데이터 쓰기, 수정...)
			3xx :
				301, 302 : 페이지 이동
				304 : 캐시됨(캐시 - 브라우저에 파일 임시 저장)
					-> 요청 -> 캐시 O -> 사용
				같은 데이터를 불러올 때의 서버 부담을 줄이기 위해 사용, 
				브라우저안에 파일들을 임시로 저장해서 같은 데이터를 불러올 때
				브라우저 내부의 파일을 꺼낸다.
				일반적인 사용에서는 용이하나 개발환경에서는 개발 후 갱신을
				막는 요소가 되기 때문에 꺼 두는것이 좋다. (또는, 캐시를 비운다.)

			4xx :  요청측의 문제
				400: Bad Request : 잘못된 요청
					- 요청 데이터가 잘못되었을때
				401: 접속 권한 없음(관리자 페이지)
				403: forbidden : 특정 폴더의 접속권이 없을때
				404: 페이지 없음
				405: Method Not Allowed(GET, POST ....)

			5xx : 서버쪽 오류
				500 : 서버 내부 오류
					-실제 서버 장비에 문제가 있는 경우
					-프로그램 소스의 오류
				501, 502 : Service Not Available, Maintainance...
		
			-응답 바디에 대한 데이터의 종류
			(content-type)

			- 서버의 브라우저의 행위 통제
				Location : 주소 -> 브라우저에게 주소 이동
				Refresh : 초; -> 설정된 초 단위로 새로고침
				Set-Cookie: 키=값; ... -> 브라우저에 쿠키 저장
				content-disposition: attachment ....->
				브라우저에게 바디 데이터를 지정된 파일로 다운로드

		응답 바디(Body)
			응답 데이터 : 서버가 인식하려면 반드시 응답헤더에
					content-type이 필요하다.

요청 방식(method)

GET
- 조회
- 브라우저 주소창에 입력하고 요청

https://search.naver.com/search.naver

?
where=nexearch
&
sm=top_hty
&
fbm=1
&
ie=utf8
&
query=블로그 (항목과 값 형태로 전송)(서버에서 참고할 데이터) 
-> 쿼리스트링(?를 포함해 끝까지)
(조회의 용도)
질의(query)



POST
- 데이터 작성, 쓰기...




PUT
PATCH
DELETE
OPTIONS
			

서블릿
1. HttpServlet

2. Filter

JSP의 특징
1. JSP의 데이터 처리과정









